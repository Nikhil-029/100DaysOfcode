import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for(int i = 0; i < V+1; i++)
                list.add(i, new ArrayList<Integer>());
            for(int i = 0; i < E; i++)
            {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
                list.get(v).add(u);
            }
            int X = sc.nextInt();
            
            Solution ob = new Solution();
            
            System.out.println(ob.nodeLevel(V,list,X));
        }
    }
}

class Pair{
    int v,level;
    Pair(int vertex,int lvl){
        v = vertex;
        level = lvl;
    }
}
class Solution
{
    //Function to find the level of node X.
    int nodeLevel(int V, ArrayList<ArrayList<Integer>> adj, int X)
    {
        boolean [] visited = new boolean[V];
        //use bfs
        Queue<Pair> q = new ArrayDeque<>();
        q.add(new Pair(0,0));
        while(q.size()>0){
            //remove
            Pair rem = q.remove();
            //mark
            if(visited[rem.v]==true)continue;
            visited[rem.v] = true;
            //work
            if(rem.v==X){
                return rem.level;
            }
            //add non-visited nbrs
            for(int nbr: adj.get(rem.v))
            {
                if(visited[nbr]==false)
                {
                    q.add(new Pair(nbr,rem.level+1));
                }
            }
        }
        return -1;
    }
}