import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] S = br.readLine().trim().split(" ");
            int n = Integer.parseInt(S[0]);
            int m = Integer.parseInt(S[1]);
            int s = Integer.parseInt(S[2]);
            int d = Integer.parseInt(S[3]);
            int[][] edges = new int[m][2];
            for(int i = 0; i < m; i++){
                String[] S1 = br.readLine().trim().split(" ");
                edges[i][0] = Integer.parseInt(S1[0]);
                edges[i][1] = Integer.parseInt(S1[1]);
            }
            Solution obj = new Solution();
            int ans = obj.possible_paths(edges, n, s, d);
            System.out.println(ans);
        }
    }
}

class Solution
{
    public int possible_paths(int[][] edges, int n, int s, int d)
    {
        
         Queue<Integer>q = new LinkedList<>();
        q.offer(s);
        int count = 0;
        
        while(!q.isEmpty())
        {
            int curr = q.poll();
            if(curr == d)count++;
            
            for(int[]x : edges)
            {
                if(x[0] == curr)
                {
                    q.offer(x[1]);
                }
            }
        }
        return count;
    }
}