import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main(String args[]) throws IOException {

        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String str[] = read.readLine().trim().split(" ");
            int V = Integer.parseInt(str[0]);
            int E = Integer.parseInt(str[1]);
    
            ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<ArrayList<ArrayList<Integer>>>();
            for(int i=0;i<V;i++)
            {
                adj.add(new ArrayList<ArrayList<Integer>>());
            }
            
            int i=0;
            while (i++<E) {
                String S[] = read.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                int w = Integer.parseInt(S[2]);
                ArrayList<Integer> t1 = new ArrayList<Integer>();
                ArrayList<Integer> t2 = new ArrayList<Integer>();
                t1.add(v);
                t1.add(w);
                t2.add(u);
                t2.add(w);
                adj.get(u).add(t1);
                adj.get(v).add(t2);
            }
            
            int S = Integer.parseInt(read.readLine());
            
            Solution ob = new Solution();
            
            int[] ptr = ob.dijkstra(V, adj, S);
            
            for(i=0; i<V; i++)
                System.out.print(ptr[i] + " ");
            System.out.println();
        }
    }
}

class Solution {
  static int[] dijkstra(int V, ArrayList < ArrayList < ArrayList < Integer >>> adj, int S)
  {
    int[] ans = new int[V];
    PriorityQueue < int[] > pq = new PriorityQueue < > ((o1, o2)->o1[1]-o2[1]);
    boolean[] visited = new boolean[V];
    
    pq.add(new int[] {S,0});
    while (!pq.isEmpty()) 
    {
      int[] curr = pq.remove();
      int currWeight=curr[1];
      int currEle=curr[0];
      if (!visited[currEle])
      {
        ans[currEle] = currWeight;
        visited[currEle] = true;
        for (ArrayList < Integer > i: adj.get(currEle)) 
        {
             int nebEle=i.get(0);
             int nebWeight=i.get(1);
          if (!visited[nebEle]) 
          {
            pq.add(new int[] {nebEle, currWeight + nebWeight });
          }
        }
      }
    }
    return ans;
  }
}

