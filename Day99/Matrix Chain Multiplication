import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String input_line[] = in.readLine().trim().split("\\s+");
            int arr[]= new int[N];
            for(int i = 0; i < N; i++)
                arr[i] = Integer.parseInt(input_line[i]);
            
            Solution ob = new Solution();
            System.out.println(ob.matrixMultiplication(N, arr));
        }
    }
}
class Solution{
    
    static int[][] dp;
    
    Solution(int n){
        dp = new int[n+1][n+1];
        for(int[] arr : dp) Arrays.fill(arr, -1);
    }
    
    Solution(){}
    
    public int solve(int[] arr, int i, int j){
        if(i>=j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int min = Integer.MAX_VALUE;
        for(int k=i; k<j; k++){
            int x = dp[i][k]==-1 ? solve(arr,i,k) : dp[i][k];
            int y = dp[k+1][j]==-1 ? solve(arr,k+1,j) : dp[k+1][j];
            dp[i][k]=x; dp[k+1][j]=y;
            int temp = x + y + arr[i-1]*arr[k]*arr[j];
            min = Math.min(min, temp);
        }
        return min;
    }
    static int matrixMultiplication(int N, int arr[]){
        return new Solution(N).solve(arr,1,N-1);
    }
}