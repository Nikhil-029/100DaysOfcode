import java.util.*;
import java.io.*;
import java.lang.*;

public class Main{
	static BufferedReader br;
	static PrintWriter ot;
    public static void main(String args[]) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		ot = new PrintWriter(System.out);
		int t = Integer.parseInt(br.readLine().trim());
		while(t-- > 0){
			String s[] = br.readLine().trim().split(" ");
			int V = Integer.parseInt(s[0]);
			int E = Integer.parseInt(s[1]);
			int edges[][] = new int[E][3];
			for(int i = 0; i < E; i++){
				s = br.readLine().trim().split(" ");
				edges[i][0] = Integer.parseInt(s[0]);
				edges[i][1] = Integer.parseInt(s[1]);
				edges[i][2] = Integer.parseInt(s[2]);
			}
			ot.println(new Solution().spanningTree(V, E, edges));
		}
		ot.close();
	}
}

class Solution{
    static int[] parent , rank;
    static int find(int x){
        if(parent[x] == x) return x;
        
        int res = find(parent[x]);
        return res;
    }
    
    static void union(int x, int y){
        
        int px = find(x);
        int py = find(y);
        
        if(rank[px] < rank[y]){
            parent[px] = py;
        }
        else if(rank[px] > rank[py]){
            parent[py] = px;
        }
        else {
            parent[py] = px;
            rank[px]++;
        }
    }
    
	static int spanningTree(int V, int E, int edges[][]){
	    int n = V;
	    
	    parent = new int[n];
	    rank = new int[n];
	    for(int i = 0; i < n; i++){
	        parent[i] = i;
	        rank[i] = 1;
	    }
	    
	   // sort the mat array
	   Arrays.sort(edges, new Comparator<int[]>(){
	       public int compare(int[]a, int[]b){
	           return Integer.compare(a[2],b[2]);
	       }
	   });
	   
	   int sum = 0;
	   for(int i = 0; i < E; i++){
	       int x = edges[i][0] , y = edges[i][1];
	       
	       int px = find(x);
	       int py = find(y);
	       
	       if(px != py){
	           sum += edges[i][2];
	           union(px,py);
	       }
	   }
	   return sum;
	}
}