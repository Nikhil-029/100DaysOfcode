import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
            for(int i = 0; i < V; i++)
                adj.add(i, new ArrayList<Integer>());
            for(int i = 0; i < E; i++){
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
            }
            Solution obj = new Solution();
            int ans = obj.findMotherVertex(V, adj);
            System.out.println(ans);
       }
    }
}

class Solution

{
     static int count=1;
    public int findMotherVertex(int V, ArrayList<ArrayList<Integer>>adj){
        boolean vis[]=nw boolean[V];
        Arrays.fill(vis,false);
        for(int i=0;i<V;i++){
            count=0;
            Arrays.fill(vis,false);
            DFS(adj,i,vis);
            if(count==V)
                return i;
        }
        return -1;
    }
    public void DFS(ArrayList<ArrayList<Integer>>adj,int node,boolean vis[]){
        vis[node]=true;
        count+=1;
        for(int i=0;i<adj.get(node).size();i++){
            int v=adj.get(node).get(i);
            if(vis[v]==false){
                DFS(adj,v,vis);
            }
        }
    }
}